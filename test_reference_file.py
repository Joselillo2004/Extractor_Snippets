#!/usr/bin/env python3
"""
Tests espec√≠ficos para validar el procesamiento del archivo "Referencia Python.py"

Este script valida que las mejoras educativas funcionen correctamente
con el archivo de referencia real del proyecto.
"""

import sys
from pathlib import Path

# Agregar src al path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from snippets.agents.educational_enhancements import (
    CommentContextDetector, 
    EducationalSnippetClassifier, 
    OOPPatternDetector
)
from snippets.agents.base_agent import Snippet
from snippets.agents.context_analyzer import ContextAnalyzer


class SimpleSnippetExtractor:
    """Simple extractor para extraer snippets del c√≥digo"""
    
    def extract_snippets(self, content):
        """Extrae snippets b√°sicos del contenido"""
        snippets = []
        
        # Dividir por l√≠neas vac√≠as o comentarios largos
        sections = []
        current_section = []
        
        lines = content.split('\n')
        for i, line in enumerate(lines):
            # Nueva secci√≥n si hay l√≠nea vac√≠a o comentario separador
            if (not line.strip() or 
                (line.strip().startswith('#') and '-' in line and len(line) > 50)):
                if current_section:
                    sections.append('\n'.join(current_section))
                    current_section = []
            else:
                current_section.append(line)
        
        # Agregar √∫ltima secci√≥n
        if current_section:
            sections.append('\n'.join(current_section))
        
        # Crear snippets
        for i, section in enumerate(sections):
            if section.strip():
                snippets.append(Snippet(section, i))
        
        return snippets


def test_reference_file_processing():
    """Test procesamiento completo del archivo de referencia"""
    print("üìÑ Testing Reference File Processing")
    print("-" * 60)
    
    reference_file = Path("Referencia Python.py")
    
    if not reference_file.exists():
        print("‚ùå Archivo 'Referencia Python.py' no encontrado en el directorio actual")
        return False
    
    # Leer el archivo
    with open(reference_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    print(f"‚úÖ Archivo le√≠do exitosamente: {len(content)} caracteres")
    
    # Extraer snippets b√°sicos
    extractor = SimpleSnippetExtractor()
    basic_snippets = extractor.extract_snippets(content)
    
    print(f"‚úÖ Snippets b√°sicos extra√≠dos: {len(basic_snippets)}")
    
    return True, content, basic_snippets


def test_educational_analysis_on_reference():
    """Test an√°lisis educativo en el archivo de referencia"""
    print("\nüéì Testing Educational Analysis on Reference File")
    print("-" * 60)
    
    success, content, basic_snippets = test_reference_file_processing()
    if not success:
        return
    
    # An√°lisis de comentarios educativos en el archivo completo
    detector = CommentContextDetector()
    comment_analysis = detector.detect_educational_comments(content)
    
    print(f"üìä An√°lisis de Comentarios del Archivo Completo:")
    print(f"   Total comentarios: {comment_analysis['total_comments']}")
    print(f"   Comentarios educativos: {comment_analysis['educational_comments']}")
    print(f"   Tipos de comentarios: {comment_analysis['comment_types']}")
    print(f"   Score de calidad: {comment_analysis['comment_quality_score']:.2f}/10")
    print(f"   Tiene explicaciones: {comment_analysis['has_explanations']}")
    print(f"   Tiene ejemplos: {comment_analysis['has_examples']}")
    
    # Conceptos generales detectados en todo el archivo
    overall_concepts = detector.detect_educational_concepts(content)
    print(f"\nüéØ Conceptos Detectados en el Archivo Completo:")
    print(f"   {', '.join(overall_concepts)}")
    
    return basic_snippets


def test_snippet_classification_distribution():
    """Test distribuci√≥n de clasificaci√≥n de snippets"""
    print("\nüìà Testing Snippet Classification Distribution")
    print("-" * 60)
    
    basic_snippets = test_educational_analysis_on_reference()
    if not basic_snippets:
        return
    
    classifier = EducationalSnippetClassifier()
    
    # Estad√≠sticas de clasificaci√≥n
    level_counts = {"beginner": 0, "intermediate": 0, "advanced": 0, "expert": 0}
    concept_counts = {}
    difficulty_scores = []
    quality_scores = []
    
    sample_snippets = []  # Para mostrar ejemplos
    
    for i, snippet in enumerate(basic_snippets[:50]):  # Analizar primeros 50 snippets
        if len(snippet.content.strip()) < 10:  # Saltar snippets muy peque√±os
            continue
            
        context = classifier.classify_snippet(snippet)
        
        # Contabilizar
        level_counts[context.level.value] += 1
        difficulty_scores.append(context.difficulty_score)
        quality_scores.append(context.comment_quality)
        
        for topic in context.topics:
            concept_counts[topic] = concept_counts.get(topic, 0) + 1
        
        # Guardar algunos ejemplos interesantes
        if len(sample_snippets) < 3 and context.difficulty_score > 2.0:
            sample_snippets.append((snippet, context))
    
    # Mostrar estad√≠sticas
    print("üìä Distribuci√≥n por Nivel Educativo:")
    for level, count in level_counts.items():
        if count > 0:
            print(f"   {level.title():12}: {count:3} snippets")
    
    print(f"\nüìà M√©tricas Generales:")
    print(f"   Dificultad promedio: {sum(difficulty_scores)/len(difficulty_scores):.2f}/10")
    print(f"   Calidad promedio: {sum(quality_scores)/len(quality_scores):.2f}/10")
    
    print(f"\nüéØ Top 10 Conceptos M√°s Frecuentes:")
    sorted_concepts = sorted(concept_counts.items(), key=lambda x: x[1], reverse=True)[:10]
    for concept, count in sorted_concepts:
        print(f"   {concept:15}: {count:3} veces")
    
    # Mostrar ejemplos interesantes
    print(f"\nüìù Ejemplos de Snippets Interesantes:")
    for i, (snippet, context) in enumerate(sample_snippets):
        print(f"\n   üìå Ejemplo {i+1} - Nivel: {context.level.value}")
        print(f"      Dificultad: {context.difficulty_score:.2f}/10")
        print(f"      Conceptos: {', '.join(context.topics[:3])}")  # Primeros 3 conceptos
        
        # Mostrar primeras l√≠neas del snippet
        lines = snippet.content.strip().split('\n')[:3]
        for line in lines:
            if line.strip():
                print(f"      > {line}")
        if len(snippet.content.strip().split('\n')) > 3:
            print(f"      > ... ({len(snippet.content.strip().split('\n'))} l√≠neas total)")


def test_oop_patterns_in_reference():
    """Test detecci√≥n de patrones POO en el archivo de referencia"""
    print("\nüèóÔ∏è Testing OOP Patterns in Reference File")
    print("-" * 60)
    
    success, content, basic_snippets = test_reference_file_processing()
    if not success:
        return
    
    # Filtrar solo snippets que contengan clases
    oop_snippets = []
    for snippet in basic_snippets:
        if 'class ' in snippet.content and len(snippet.content.strip()) > 50:
            oop_snippets.append(snippet)
    
    print(f"‚úÖ Snippets con clases encontrados: {len(oop_snippets)}")
    
    if oop_snippets:
        detector = OOPPatternDetector()
        relationships = detector.detect_class_relationships(oop_snippets)
        
        print(f"\nüîç An√°lisis de Patrones POO:")
        print(f"   Clases detectadas: {len(relationships['classes'])}")
        print(f"   Cadenas de herencia: {len(relationships['inheritance_chains'])}")
        print(f"   M√©todos sobreescritos: {len(relationships['method_overrides'])}")
        print(f"   Tiene herencia: {relationships['has_inheritance']}")
        print(f"   Tiene polimorfismo: {relationships['has_polymorphism']}")
        
        if relationships['classes']:
            print(f"\nüìù Clases Encontradas:")
            for class_name, details in relationships['classes'].items():
                print(f"   {class_name}: {len(details.get('methods', []))} m√©todos")
        
        if relationships['inheritance_chains']:
            print(f"\nüîó Cadenas de Herencia:")
            for chain in relationships['inheritance_chains']:
                print(f"   {chain['child']} ‚Üí {chain['parent']}")


def test_context_analyzer_integration():
    """Test integraci√≥n con el clasificador educativo"""
    print("\nüîó Testing Educational Integration")
    print("-" * 60)
    
    success, content, basic_snippets = test_reference_file_processing()
    if not success:
        return
    
    # Usar solo el clasificador educativo
    educational_classifier = EducationalSnippetClassifier()
    
    sample_snippets = basic_snippets[:10]  # Analizar primeros 10 snippets
    classified_snippets = []
    
    for snippet in sample_snippets:
        if len(snippet.content.strip()) > 20:  # Saltar snippets muy peque√±os
            context = educational_classifier.classify_snippet(snippet)
            classified_snippets.append((snippet, context))
    
    print(f"‚úÖ Snippets clasificados educacionalmente: {len(classified_snippets)}")
    
    print(f"\nüìä Resultados de Clasificaci√≥n:")
    print(f"{'Index':<5} {'Educational Level':<16} {'Difficulty':<10} {'Topics':<20}")
    print("-" * 60)
    
    for i, (snippet, context) in enumerate(classified_snippets[:5]):
        topics_str = ', '.join(context.topics[:2])  # Primeros 2 topics
        if len(context.topics) > 2:
            topics_str += '...'
            
        print(f"{i+1:<5} "
              f"{context.level.value:<16} "
              f"{context.difficulty_score:.1f}/10{'':<4} "
              f"{topics_str:<20}")


def test_performance_on_large_file():
    """Test rendimiento en archivo grande"""
    print("\n‚ö° Testing Performance on Large File")
    print("-" * 60)
    
    import time
    
    success, content, basic_snippets = test_reference_file_processing()
    if not success:
        return
    
    print(f"üìè Tama√±o del archivo: {len(content):,} caracteres")
    print(f"üìÑ Snippets extra√≠dos: {len(basic_snippets)} snippets")
    
    # Test de rendimiento del detector de comentarios
    start_time = time.time()
    detector = CommentContextDetector()
    comment_analysis = detector.detect_educational_comments(content)
    comment_time = time.time() - start_time
    
    print(f"\n‚è±Ô∏è An√°lisis de Comentarios: {comment_time:.3f} segundos")
    
    # Test de rendimiento del clasificador educativo
    start_time = time.time()
    classifier = EducationalSnippetClassifier()
    
    classified_count = 0
    for snippet in basic_snippets[:100]:  # Clasificar primeros 100
        if len(snippet.content.strip()) > 10:
            context = classifier.classify_snippet(snippet)
            classified_count += 1
    
    classification_time = time.time() - start_time
    
    print(f"‚è±Ô∏è Clasificaci√≥n de {classified_count} snippets: {classification_time:.3f} segundos")
    print(f"‚ö° Promedio por snippet: {(classification_time/classified_count)*1000:.1f} ms")


def main():
    """Ejecuta todos los tests espec√≠ficos del archivo de referencia"""
    print("üìÑ REFERENCE FILE TESTING")
    print("=" * 70)
    print("Validando el procesamiento del archivo 'Referencia Python.py'")
    print("=" * 70)
    
    # Verificar si existe el archivo
    reference_file = Path("Referencia Python.py")
    if not reference_file.exists():
        print("‚ùå ERROR: Archivo 'Referencia Python.py' no encontrado")
        print("   Por favor, aseg√∫rate de que el archivo est√© en el directorio actual")
        return
    
    # Ejecutar tests
    test_educational_analysis_on_reference()
    test_snippet_classification_distribution()
    test_oop_patterns_in_reference()
    test_context_analyzer_integration()
    test_performance_on_large_file()
    
    print("\n" + "=" * 70)
    print("‚úÖ TESTS DEL ARCHIVO DE REFERENCIA COMPLETADOS")
    print("=" * 70)
    print("üìä RESUMEN DE RESULTADOS:")
    print("- ‚úÖ Procesamiento del archivo de referencia exitoso")
    print("- ‚úÖ An√°lisis educativo de comentarios funcionando")
    print("- ‚úÖ Clasificaci√≥n de snippets por nivel educativo operativa")
    print("- ‚úÖ Detecci√≥n de patrones POO en c√≥digo real validada")
    print("- ‚úÖ Integraci√≥n con sistema existente confirmada")
    print("- ‚úÖ Rendimiento en archivos grandes aceptable")
    print("\nüéì Las mejoras educativas est√°n listas para usar con el archivo de referencia!")


if __name__ == "__main__":
    main()
