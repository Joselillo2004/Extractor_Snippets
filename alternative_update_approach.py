#!/usr/bin/env python3
"""
Enfoque alternativo para actualizar snippets sin usar the-way delete
Este script crea nuevos snippets con mejores descripciones y permite al usuario 
decidir manualmente qu√© hacer con los antiguos.
"""
import subprocess
import json
import sys
import time
from pathlib import Path
from typing import List, Dict, Optional

def load_improvements(improvements_file: Path) -> List[Dict]:
    """Carga las mejoras desde el archivo JSON"""
    try:
        with open(improvements_file, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"‚ùå Archivo no encontrado: {improvements_file}")
        return []
    except json.JSONDecodeError as e:
        print(f"‚ùå Error decodificando JSON: {e}")
        return []

def execute_the_way_command(command: List[str]) -> tuple[bool, str, str]:
    """Ejecuta un comando de the-way y retorna √©xito, stdout, stderr"""
    try:
        result = subprocess.run(
            command,
            capture_output=True,
            text=True,
            timeout=30
        )
        return result.returncode == 0, result.stdout, result.stderr
    except subprocess.TimeoutExpired:
        return False, "", "Timeout ejecutando comando"
    except Exception as e:
        return False, "", str(e)

def create_improved_snippet(improvement: Dict, dry_run: bool = True) -> bool:
    """Crea un nuevo snippet mejorado sin eliminar el anterior"""
    snippet_id = improvement['id']
    content = improvement['content']
    enhanced_desc = improvement['enhanced_description']
    enhanced_tags = improvement['enhanced_tags']
    
    print(f"üîÑ Creando snippet mejorado basado en #{snippet_id}")
    print(f"   Descripci√≥n: {enhanced_desc}")
    print(f"   Tags: {enhanced_tags}")
    
    if dry_run:
        print("   [DRY RUN] No se crear√° el snippet real")
        return True
    
    # Crear archivo temporal
    temp_file = Path(f"temp_improved_{snippet_id}.py")
    try:
        with open(temp_file, 'w', encoding='utf-8') as f:
            f.write(content)
    except Exception as e:
        print(f"   ‚ùå Error creando archivo temporal: {e}")
        return False
    
    # Importar nuevo snippet con descripci√≥n mejorada
    print("   ‚¨ÜÔ∏è  Importando snippet mejorado...")
    import_cmd = [
        "/home/joselillo/.cargo/bin/the-way", 
        "import", 
        str(temp_file),
        "--description", 
        f"[MEJORADO] {enhanced_desc}",
        "--tags", 
        enhanced_tags
    ]
    
    success, stdout, stderr = execute_the_way_command(import_cmd)
    
    # Limpiar archivo temporal
    temp_file.unlink(missing_ok=True)
    
    if success:
        print("   ‚úÖ Snippet mejorado creado exitosamente")
        print(f"   üìù Ahora tienes dos versiones: original #{snippet_id} y mejorada")
        return True
    else:
        print(f"   ‚ùå Error creando snippet mejorado: {stderr}")
        return False

def process_improvements_batch(improvements_file: str, dry_run: bool = True, batch_size: int = 5):
    """Procesa mejoras en lotes para evitar sobrecargar the-way"""
    
    improvements_path = Path(improvements_file)
    if not improvements_path.exists():
        print(f"‚ùå Archivo de mejoras no encontrado: {improvements_path}")
        return
    
    improvements = load_improvements(improvements_path)
    if not improvements:
        print("‚ùå No se pudieron cargar las mejoras")
        return
    
    print(f"üìä Se encontraron {len(improvements)} snippets para procesar")
    print(f"üìÅ Archivo de mejoras: {improvements_path}")
    print(f"üì¶ Tama√±o de lote: {batch_size}")
    
    if dry_run:
        print("üß™ MODO DRY RUN - No se crear√°n snippets reales")
    else:
        print("‚ö†Ô∏è  MODO REAL - Se crear√°n snippets mejorados")
    
    print()
    
    # Procesar en lotes
    successful = 0
    failed = 0
    
    for i in range(0, len(improvements), batch_size):
        batch = improvements[i:i + batch_size]
        print(f"üì¶ Procesando lote {i//batch_size + 1}: snippets {batch[0]['id']}-{batch[-1]['id']}")
        
        for improvement in batch:
            try:
                if create_improved_snippet(improvement, dry_run):
                    successful += 1
                else:
                    failed += 1
            except KeyboardInterrupt:
                print("\n‚ö†Ô∏è  Operaci√≥n interrumpida por el usuario")
                return
            except Exception as e:
                print(f"‚ùå Error inesperado procesando snippet {improvement['id']}: {e}")
                failed += 1
            
            if not dry_run:
                time.sleep(0.2)  # Pausa breve entre snippets
        
        if not dry_run and i + batch_size < len(improvements):
            print(f"   ‚è∏Ô∏è  Pausa entre lotes...")
            time.sleep(2)  # Pausa m√°s larga entre lotes
        
        print()
    
    # Resumen final
    print("=" * 60)
    if dry_run:
        print(f"üß™ DRY RUN COMPLETADO")
        print(f"   üìä {len(improvements)} snippets ser√≠an procesados")
        print(f"   ‚úÖ Para crear los snippets mejorados, ejecuta con --apply")
    else:
        print(f"‚úÖ PROCESAMIENTO COMPLETADO")
        print(f"   üìä Total procesados: {successful + failed}")
        print(f"   ‚úÖ Exitosos: {successful}")
        print(f"   ‚ùå Fallidos: {failed}")
        
        if successful > 0:
            print(f"\nüìã SIGUIENTES PASOS RECOMENDADOS:")
            print(f"   1. Revisar los nuevos snippets con prefijo '[MEJORADO]'")
            print(f"   2. Si est√°n correctos, eliminar manualmente los originales")
            print(f"   3. Opcional: quitar el prefijo '[MEJORADO]' de las descripciones")

def main():
    """Funci√≥n principal"""
    import argparse
    
    parser = argparse.ArgumentParser(description='Crea snippets mejorados en the-way')
    parser.add_argument('improvements_file', help='Archivo JSON con las mejoras')
    parser.add_argument('--apply', action='store_true', help='Crear snippets reales (por defecto es dry-run)')
    parser.add_argument('--batch-size', type=int, default=5, help='Tama√±o de lote para procesamiento')
    
    args = parser.parse_args()
    
    dry_run = not args.apply
    
    process_improvements_batch(args.improvements_file, dry_run, args.batch_size)

if __name__ == "__main__":
    main()
